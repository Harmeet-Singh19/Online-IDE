{"ast":null,"code":"'use strict';\n\nvar Bluebird = require('bluebird'),\n    assign = require('lodash/assign'),\n    forEach = require('lodash/forEach'),\n    isFunction = require('lodash/isFunction'),\n    isPlainObject = require('lodash/isPlainObject'),\n    isString = require('lodash/isString'),\n    isUndefined = require('lodash/isUndefined'),\n    keys = require('lodash/keys'),\n    errors = require('./errors.js'); // Load Request freshly - so that users can require an unaltered request instance!\n\n\nvar request = function () {\n  function clearCache() {\n    forEach(keys(require.cache), function (key) {\n      delete require.cache[key];\n    });\n  }\n\n  var temp = assign({}, require.cache);\n  clearCache();\n\n  var freshRequest = require('request');\n\n  clearCache();\n  assign(require.cache, temp);\n  return freshRequest;\n}();\n\nvar defaultTransformations = {\n  HEAD: function (body, response, resolveWithFullResponse) {\n    return resolveWithFullResponse ? response : response.headers;\n  }\n};\n\nfunction RP$callback(err, response, body) {\n  /* jshint validthis:true */\n  var self = this;\n  var origCallbackThrewException = false,\n      thrownException;\n\n  if (isFunction(self._rp_callbackOrig)) {\n    try {\n      self._rp_callbackOrig.apply(self, arguments);\n    } catch (e) {\n      origCallbackThrewException = true;\n      thrownException = e;\n    }\n  }\n\n  if (err) {\n    self._rp_reject(new errors.RequestError(err, self._rp_options, response));\n  } else if (self._rp_options.simple && !/^2/.test('' + response.statusCode)) {\n    if (isFunction(self._rp_options.transform)) {\n      new Bluebird(function (resolve) {\n        resolve(self._rp_options.transform(body, response, self._rp_options.resolveWithFullResponse)); // transform may return a Promise\n      }).then(function (transformedResponse) {\n        self._rp_reject(new errors.StatusCodeError(response.statusCode, body, self._rp_options, transformedResponse));\n      }).catch(function (err) {\n        self._rp_reject(new errors.TransformError(err, self._rp_options, response));\n      });\n    } else {\n      self._rp_reject(new errors.StatusCodeError(response.statusCode, body, self._rp_options, response));\n    }\n  } else {\n    if (isFunction(self._rp_options.transform)) {\n      new Bluebird(function (resolve) {\n        resolve(self._rp_options.transform(body, response, self._rp_options.resolveWithFullResponse)); // transform may return a Promise\n      }).then(function (transformedResponse) {\n        self._rp_resolve(transformedResponse);\n      }).catch(function (err) {\n        self._rp_reject(new errors.TransformError(err, self._rp_options, response));\n      });\n    } else if (self._rp_options.resolveWithFullResponse) {\n      self._rp_resolve(response);\n    } else {\n      self._rp_resolve(body);\n    }\n  }\n\n  if (origCallbackThrewException) {\n    throw thrownException;\n  }\n}\n\nvar originalInit = request.Request.prototype.init;\n\nrequest.Request.prototype.init = function RP$initInterceptor(options) {\n  var self = this; // Init may be called again - currently in case of redirects\n\n  if (isPlainObject(options) && self._callback === undefined && self._rp_promise === undefined) {\n    self._rp_promise = new Bluebird(function (resolve, reject) {\n      self._rp_resolve = resolve;\n      self._rp_reject = reject;\n    });\n    self._rp_callbackOrig = self.callback;\n    self.callback = RP$callback;\n\n    if (isString(options.method)) {\n      options.method = options.method.toUpperCase();\n    }\n\n    options.transform = options.transform || defaultTransformations[options.method];\n    self._rp_options = options;\n    self._rp_options.simple = options.simple === false ? false : true;\n    self._rp_options.resolveWithFullResponse = options.resolveWithFullResponse === true ? true : false;\n  }\n\n  return originalInit.apply(self, arguments);\n};\n\nfunction expose(methodToExpose, exposeAs) {\n  exposeAs = exposeAs || methodToExpose;\n  /* istanbul ignore if */\n\n  if (!isUndefined(request.Request.prototype[exposeAs])) {\n    throw new Error('Unable to expose method \"' + exposeAs + '\". It is already implemented by Request. Please visit https://github.com/request/request-promise/wiki/Troubleshooting');\n  }\n\n  request.Request.prototype[exposeAs] = function RP$exposed() {\n    return this._rp_promise[methodToExpose].apply(this._rp_promise, arguments);\n  };\n}\n\nexpose('then');\nexpose('catch');\nexpose('finally');\n\nrequest.Request.prototype.promise = function RP$promise() {\n  return this._rp_promise;\n};\n/* istanbul ignore next */\n// Function covered but not seen by Instanbul.\n\n\nrequest.bindCLS = function RP$bindCLS(ns) {\n  require('cls-bluebird')(ns);\n};\n\nmodule.exports = request;","map":{"version":3,"sources":["D:/WEBD/Projects(khud se)/IDE(task)/my-app/node_modules/request-promise/lib/rp.js"],"names":["Bluebird","require","assign","forEach","isFunction","isPlainObject","isString","isUndefined","keys","errors","request","clearCache","cache","key","temp","freshRequest","defaultTransformations","HEAD","body","response","resolveWithFullResponse","headers","RP$callback","err","self","origCallbackThrewException","thrownException","_rp_callbackOrig","apply","arguments","e","_rp_reject","RequestError","_rp_options","simple","test","statusCode","transform","resolve","then","transformedResponse","StatusCodeError","catch","TransformError","_rp_resolve","originalInit","Request","prototype","init","RP$initInterceptor","options","_callback","undefined","_rp_promise","reject","callback","method","toUpperCase","expose","methodToExpose","exposeAs","Error","RP$exposed","promise","RP$promise","bindCLS","RP$bindCLS","ns","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Bluebird = require('bluebird'),\n    assign = require('lodash/assign'),\n    forEach = require('lodash/forEach'),\n    isFunction = require('lodash/isFunction'),\n    isPlainObject = require('lodash/isPlainObject'),\n    isString = require('lodash/isString'),\n    isUndefined = require('lodash/isUndefined'),\n    keys = require('lodash/keys'),\n    errors = require('./errors.js');\n\n\n// Load Request freshly - so that users can require an unaltered request instance!\nvar request = (function () {\n\n    function clearCache() {\n        forEach(keys(require.cache), function (key) {\n            delete require.cache[key];\n        });\n    }\n\n    var temp = assign({}, require.cache);\n    clearCache();\n\n    var freshRequest = require('request');\n\n    clearCache();\n    assign(require.cache, temp);\n\n    return freshRequest;\n\n})();\n\n\nvar defaultTransformations = {\n    HEAD: function (body, response, resolveWithFullResponse) {\n        return resolveWithFullResponse ? response : response.headers;\n    }\n};\n\nfunction RP$callback(err, response, body) {\n\n    /* jshint validthis:true */\n    var self = this;\n\n    var origCallbackThrewException = false, thrownException;\n\n    if (isFunction(self._rp_callbackOrig)) {\n        try {\n            self._rp_callbackOrig.apply(self, arguments);\n        } catch (e) {\n            origCallbackThrewException = true;\n            thrownException = e;\n        }\n    }\n\n    if (err) {\n\n        self._rp_reject(new errors.RequestError(err, self._rp_options, response));\n\n    } else if (self._rp_options.simple && !(/^2/.test('' + response.statusCode))) {\n\n        if (isFunction(self._rp_options.transform)) {\n\n            (new Bluebird(function (resolve) {\n                resolve(self._rp_options.transform(body, response, self._rp_options.resolveWithFullResponse)); // transform may return a Promise\n            }))\n                .then(function (transformedResponse) {\n                    self._rp_reject(new errors.StatusCodeError(response.statusCode, body, self._rp_options, transformedResponse));\n                })\n                .catch(function (err) {\n                    self._rp_reject(new errors.TransformError(err, self._rp_options, response));\n                });\n\n        } else {\n            self._rp_reject(new errors.StatusCodeError(response.statusCode, body, self._rp_options, response));\n        }\n\n    } else {\n\n        if (isFunction(self._rp_options.transform)) {\n\n            (new Bluebird(function (resolve) {\n                resolve(self._rp_options.transform(body, response, self._rp_options.resolveWithFullResponse)); // transform may return a Promise\n            }))\n                .then(function (transformedResponse) {\n                    self._rp_resolve(transformedResponse);\n                })\n                .catch(function (err) {\n                    self._rp_reject(new errors.TransformError(err, self._rp_options, response));\n                });\n\n        } else if (self._rp_options.resolveWithFullResponse) {\n            self._rp_resolve(response);\n        } else {\n            self._rp_resolve(body);\n        }\n\n    }\n\n    if (origCallbackThrewException) {\n        throw thrownException;\n    }\n\n}\n\nvar originalInit = request.Request.prototype.init;\n\nrequest.Request.prototype.init = function RP$initInterceptor(options) {\n\n    var self = this;\n\n    // Init may be called again - currently in case of redirects\n    if (isPlainObject(options) && self._callback === undefined && self._rp_promise === undefined) {\n\n        self._rp_promise = new Bluebird(function (resolve, reject) {\n            self._rp_resolve = resolve;\n            self._rp_reject = reject;\n        });\n\n        self._rp_callbackOrig = self.callback;\n        self.callback = RP$callback;\n\n        if (isString(options.method)) {\n            options.method = options.method.toUpperCase();\n        }\n\n        options.transform = options.transform || defaultTransformations[options.method];\n\n        self._rp_options = options;\n        self._rp_options.simple = options.simple === false ? false : true;\n        self._rp_options.resolveWithFullResponse = options.resolveWithFullResponse === true ? true : false;\n\n    }\n\n    return originalInit.apply(self, arguments);\n\n};\n\nfunction expose(methodToExpose, exposeAs) {\n\n    exposeAs = exposeAs || methodToExpose;\n\n    /* istanbul ignore if */\n    if (!isUndefined(request.Request.prototype[exposeAs])) {\n        throw new Error('Unable to expose method \"' + exposeAs + '\". It is already implemented by Request. Please visit https://github.com/request/request-promise/wiki/Troubleshooting');\n    }\n\n    request.Request.prototype[exposeAs] = function RP$exposed() {\n        return this._rp_promise[methodToExpose].apply(this._rp_promise, arguments);\n    };\n\n}\n\nexpose('then');\nexpose('catch');\nexpose('finally');\n\nrequest.Request.prototype.promise = function RP$promise() {\n    return this._rp_promise;\n};\n\n\n/* istanbul ignore next */ // Function covered but not seen by Instanbul.\nrequest.bindCLS = function RP$bindCLS(ns) {\n    require('cls-bluebird')(ns);\n};\n\n\nmodule.exports = request;\n"]},"metadata":{},"sourceType":"script"}