{"ast":null,"code":"var _jsxFileName = \"D:\\\\WEBD\\\\Projects(khud se)\\\\IDE(task)\\\\my-app\\\\client\\\\src\\\\Editor.js\";\nimport React, { Component } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport Button from 'react-bootstrap/Button';\nimport Chat from './components/Chat/Chat';\nimport Header from \"./components/Header\";\nimport Pusher from \"pusher-js\";\nimport pushid from \"pushid\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\n\nrequire(\"codemirror/lib/codemirror.css\");\n\nrequire(\"codemirror/mode/clike/clike\");\n\nrequire(\"codemirror/theme/dracula.css\");\n\nclass Editor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.syncUpdates = () => {\n      const data = { ...this.state\n      };\n      axios.post(\"https://fauxcoder.herokuapp.com/update-editor\", data) //   .post(\"http://localhost:5000/update-editor\", data)\n      //   .post(`http://localhost:5000/editor?name=${this.props.name}&room=${this.props.room}/update-editor`, data)\n      //  .post(`http://localhost:5000/editor/update-editor`, data)\n      .catch(console.error);\n    };\n\n    this.onChange = e => {\n      var source_template = {\n        \"C\": \"#include <stdio.h>\\nint main(void) {\\n\\t// your code goes here\\n\\treturn 0;\\n}\",\n        \"CPP\": \"#include <iostream>\\nusing namespace std;\\nint main() {\\n\\t// your code goes here\\n\\treturn 0;\\n}\",\n        \"CPP11\": \"#include <iostream>\\nusing namespace std;\\nint main() {\\n\\t// your code goes here\\n\\treturn 0;\\n}\",\n        \"CLOJURE\": \"; your code goes here\",\n        \"CSHARP\": \"using System;\\npublic class Test{\\n\\tpublic static void Main(){\\n\\t// your code goes here\\n\\t}\\n}\",\n        \"JAVA\": \"/* package whatever; // don't place package name! */\\nimport java.util.*;\\nimport java.lang.*;\\nimport java.io.*;\\n\\\n    /* Name of the class has to be \\\"Main\\\" only if the class is public. */\\nclass Ideone{\\n\\t\\\n    public static void main (String[] args) throws java.lang.Exception{\\n\\t\\t// your code goes here\\n\\t}\\n}\",\n        \"JAVASCRIPT\": \"// your code goes here\",\n        \"HASKELL\": \"main = -- your code goes here\",\n        \"PERL\": \"#!/usr/bin/perl\\n# your code goes here\",\n        \"PHP\": \"<?php\\n\\n// your code goes here\",\n        \"PYTHON\": \"# your code goes here\",\n        \"RUBY\": \"# your code goes here\"\n      };\n      this.setState({\n        code: source_template[e.target.value]\n      });\n      console.log(source_template[e.target.value]);\n    };\n\n    this.state = {\n      id: \"\",\n      code: \"#include <iostream>\\nusing namespace std;\\nint main() {\\n\\t// your code goes here\\n\\treturn 0;\\n}\"\n    };\n    this.pusher = new Pusher(\"25fb961369ffad5aeb83\", {\n      cluster: \"us2\",\n      forceTLS: true\n    });\n    console.log(this.state.room); //   this.channel = this.pusher.subscribe(this.props.location.state.room);\n  }\n\n  componentDidMount() {\n    window.executeHome();\n    this.setState({\n      id: pushid()\n    });\n    this.channel.bind(\"text-update\", data => {\n      const {\n        id\n      } = this.state;\n      if (data.id === id) return;\n      this.setState({\n        code: data.code\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.channel.unbind();\n    this.pusher.unsubscribe(this.channel);\n  }\n\n  render() {\n    const {\n      code\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 8\n      }\n    }), /*#__PURE__*/React.createElement(\"select\", {\n      id: \"language\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"CPP11\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, \"C++\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"JAVA\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, \"Java\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"PYTHON\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, \"Python\")), /*#__PURE__*/React.createElement(CodeMirror, {\n      className: \"code-mirror-container\",\n      value: code,\n      options: {\n        theme: \"dracula\",\n        lineNumbers: true,\n        scrollbarStyle: null,\n        lineWrapping: true\n      },\n      onBeforeChange: (editor, data, code) => {\n        this.setState({\n          code\n        }, () => this.syncUpdates());\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"outputbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      id: \"compile\",\n      variant: \"outline-success\",\n      value: code,\n      style: {\n        color: \"#5ce198\",\n        borderColor: \"#5ce198\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, \"Compile & run\"));\n  }\n\n}\n\nexport default Editor;","map":{"version":3,"sources":["D:/WEBD/Projects(khud se)/IDE(task)/my-app/client/src/Editor.js"],"names":["React","Component","Controlled","CodeMirror","Button","Chat","Header","Pusher","pushid","axios","require","Editor","constructor","props","syncUpdates","data","state","post","catch","console","error","onChange","e","source_template","setState","code","target","value","log","id","pusher","cluster","forceTLS","room","componentDidMount","window","executeHome","channel","bind","componentWillUnmount","unbind","unsubscribe","render","theme","lineNumbers","scrollbarStyle","lineWrapping","editor","color","borderColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAU,IAAIC,UAAvB,QAAyC,mBAAzC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAO,+BAAP;AACA,OAAO,+BAAP;;AAEAC,OAAO,CAAC,+BAAD,CAAP;;AACAA,OAAO,CAAC,6BAAD,CAAP;;AACAA,OAAO,CAAC,8BAAD,CAAP;;AACA,MAAMC,MAAN,SAAqBV,SAArB,CAA+B;AAC7BW,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAoCnBC,WApCmB,GAoCL,MAAM;AAClB,YAAMC,IAAI,GAAG,EAAE,GAAG,KAAKC;AAAV,OAAb;AAEAP,MAAAA,KAAK,CACHQ,IADF,CACO,+CADP,EACwDF,IADxD,EAED;AACA;AACC;AAJA,OAKGG,KALH,CAKSC,OAAO,CAACC,KALjB;AAMD,KA7CkB;;AAAA,SA+CnBC,QA/CmB,GA+CRC,CAAC,IAAG;AACb,UAAIC,eAAe,GAAC;AAClB,aAAM,gFADY;AAElB,eAAQ,mGAFU;AAGlB,iBAAU,mGAHQ;AAIlB,mBAAY,uBAJM;AAKlB,kBAAW,mGALO;AAMlB,gBAAS;;4GANS;AASlB,sBAAa,wBATK;AAUlB,mBAAU,+BAVQ;AAWlB,gBAAO,wCAXW;AAYlB,eAAM,iCAZY;AAalB,kBAAS,uBAbS;AAclB,gBAAO;AAdW,OAApB;AAgBA,WAAKC,QAAL,CAAc;AAACC,QAAAA,IAAI,EAAEF,eAAe,CAACD,CAAC,CAACI,MAAF,CAASC,KAAV;AAAtB,OAAd;AACAR,MAAAA,OAAO,CAACS,GAAR,CAAYL,eAAe,CAACD,CAAC,CAACI,MAAF,CAASC,KAAV,CAA3B;AACD,KAlEkB;;AAEjB,SAAKX,KAAL,GAAa;AACXa,MAAAA,EAAE,EAAE,EADO;AAEXJ,MAAAA,IAAI,EAAE;AAFK,KAAb;AAMA,SAAKK,MAAL,GAAc,IAAIvB,MAAJ,CAAW,sBAAX,EAAmC;AAC/CwB,MAAAA,OAAO,EAAE,KADsC;AAE/CC,MAAAA,QAAQ,EAAE;AAFqC,KAAnC,CAAd;AAIAb,IAAAA,OAAO,CAACS,GAAR,CAAY,KAAKZ,KAAL,CAAWiB,IAAvB,EAZiB,CAapB;AAEE;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,MAAM,CAACC,WAAP;AACA,SAAKZ,QAAL,CAAc;AACZK,MAAAA,EAAE,EAAErB,MAAM;AADE,KAAd;AAIA,SAAK6B,OAAL,CAAaC,IAAb,CAAkB,aAAlB,EAAiCvB,IAAI,IAAI;AACvC,YAAM;AAAEc,QAAAA;AAAF,UAAS,KAAKb,KAApB;AACA,UAAID,IAAI,CAACc,EAAL,KAAYA,EAAhB,EAAoB;AAEpB,WAAKL,QAAL,CAAc;AACZC,QAAAA,IAAI,EAAEV,IAAI,CAACU;AADC,OAAd;AAGD,KAPD;AAQD;;AACDc,EAAAA,oBAAoB,GAAE;AACpB,SAAKF,OAAL,CAAaG,MAAb;AACA,SAAKV,MAAL,CAAYW,WAAZ,CAAwB,KAAKJ,OAA7B;AACD;;AAkCDK,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEjB,MAAAA;AAAF,QAAU,KAAKT,KAArB;AAEA,wBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,eAEE;AAAQ,MAAA,EAAE,EAAC,UAAX;AAAsB,MAAA,QAAQ,EAAE,KAAKK,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,KAAK,EAAG,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAQ,MAAA,KAAK,EAAG,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,MAAA,KAAK,EAAG,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CAFF,eASE,oBAAC,UAAD;AACE,MAAA,SAAS,EAAC,uBADZ;AAEE,MAAA,KAAK,EAAEI,IAFT;AAGE,MAAA,OAAO,EAAE;AACPkB,QAAAA,KAAK,EAAE,SADA;AAEPC,QAAAA,WAAW,EAAE,IAFN;AAGPC,QAAAA,cAAc,EAAE,IAHT;AAIPC,QAAAA,YAAY,EAAE;AAJP,OAHX;AASE,MAAA,cAAc,EAAE,CAACC,MAAD,EAAShC,IAAT,EAAeU,IAAf,KAAwB;AACtC,aAAKD,QAAL,CAAc;AAAEC,UAAAA;AAAF,SAAd,EAAwB,MAAM,KAAKX,WAAL,EAA9B;AACD,OAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,eAuBE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBF,eAwBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBF,eAyBE,oBAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,SAAX;AAAqB,MAAA,OAAO,EAAC,iBAA7B;AAA+C,MAAA,KAAK,EAAEW,IAAtD;AAA4D,MAAA,KAAK,EAAE;AAACuB,QAAAA,KAAK,EAAE,SAAR;AAAmBC,QAAAA,WAAW,EAAE;AAAhC,OAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAzBF,CAFF;AA8BD;;AAvG4B;;AA0G/B,eAAetC,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport Button from 'react-bootstrap/Button';\nimport Chat from './components/Chat/Chat';\nimport Header from \"./components/Header\";\nimport Pusher from \"pusher-js\";\nimport pushid from \"pushid\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\n\nrequire(\"codemirror/lib/codemirror.css\");\nrequire(\"codemirror/mode/clike/clike\");\nrequire(\"codemirror/theme/dracula.css\");\nclass Editor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: \"\",\n      code: \"#include <iostream>\\nusing namespace std;\\nint main() {\\n\\t// your code goes here\\n\\treturn 0;\\n}\",\n      \n    };\n   \n    this.pusher = new Pusher(\"25fb961369ffad5aeb83\", {\n      cluster: \"us2\",\n      forceTLS: true\n    });\n    console.log(this.state.room);\n //   this.channel = this.pusher.subscribe(this.props.location.state.room);\n   \n  }\n\n  componentDidMount() {\n    window.executeHome();\n    this.setState({\n      id: pushid()\n    });\n\n    this.channel.bind(\"text-update\", data => {\n      const { id } = this.state;\n      if (data.id === id) return;\n\n      this.setState({\n        code: data.code\n      });\n    });\n  }\n  componentWillUnmount(){\n    this.channel.unbind();\n    this.pusher.unsubscribe(this.channel);\n  }\n  syncUpdates = () => {\n    const data = { ...this.state };\n\n    axios\n     .post(\"https://fauxcoder.herokuapp.com/update-editor\", data)\n   //   .post(\"http://localhost:5000/update-editor\", data)\n   //   .post(`http://localhost:5000/editor?name=${this.props.name}&room=${this.props.room}/update-editor`, data)\n    //  .post(`http://localhost:5000/editor/update-editor`, data)\n      .catch(console.error);\n  };\n  \n  onChange = e =>{\n    var source_template={\n      \"C\" : \"#include <stdio.h>\\nint main(void) {\\n\\t// your code goes here\\n\\treturn 0;\\n}\",\n      \"CPP\" : \"#include <iostream>\\nusing namespace std;\\nint main() {\\n\\t// your code goes here\\n\\treturn 0;\\n}\",\n      \"CPP11\" : \"#include <iostream>\\nusing namespace std;\\nint main() {\\n\\t// your code goes here\\n\\treturn 0;\\n}\",\n      \"CLOJURE\" : \"; your code goes here\",\n      \"CSHARP\" : \"using System;\\npublic class Test{\\n\\tpublic static void Main(){\\n\\t// your code goes here\\n\\t}\\n}\",\n      \"JAVA\" : \"/* package whatever; // don't place package name! */\\nimport java.util.*;\\nimport java.lang.*;\\nimport java.io.*;\\n\\\n    /* Name of the class has to be \\\"Main\\\" only if the class is public. */\\nclass Ideone{\\n\\t\\\n    public static void main (String[] args) throws java.lang.Exception{\\n\\t\\t// your code goes here\\n\\t}\\n}\",\n      \"JAVASCRIPT\":\"// your code goes here\",\n      \"HASKELL\":\"main = -- your code goes here\",\n      \"PERL\":\"#!/usr/bin/perl\\n# your code goes here\",\n      \"PHP\":\"<?php\\n\\n// your code goes here\",\n      \"PYTHON\":\"# your code goes here\",\n      \"RUBY\":\"# your code goes here\"\n    };\n    this.setState({code: source_template[e.target.value]});\n    console.log(source_template[e.target.value]);\n  }\n\n  \n  render() {\n    const { code} = this.state;\n    \n    return (\n    \n      <div>\n       <Header/> \n        <select id=\"language\" onChange={this.onChange}>\n          <option value = \"CPP11\" >C++</option>\n          <option value = \"JAVA\">Java</option>\n          <option value = \"PYTHON\">Python</option>\n        </select>\n        {/*<Chat name={this.props.location.state.name}/>*/}\n\n        <CodeMirror\n          className=\"code-mirror-container\"\n          value={code}\n          options={{\n            theme: \"dracula\",\n            lineNumbers: true,\n            scrollbarStyle: null,\n            lineWrapping: true\n          }}\n          onBeforeChange={(editor, data, code) => {\n            this.setState({ code }, () => this.syncUpdates());\n          }}\n        />\n          \n        <div id=\"outputbox\"></div>\n        <br/>\n        <Button id=\"compile\" variant=\"outline-success\" value={code} style={{color: \"#5ce198\", borderColor: \"#5ce198\" }}>Compile & run</Button>\n    </div>  \n    );\n  }\n}\n\nexport default Editor;\n"]},"metadata":{},"sourceType":"module"}