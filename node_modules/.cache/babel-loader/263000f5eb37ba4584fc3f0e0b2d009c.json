{"ast":null,"code":"var _jsxFileName = \"D:\\\\WEBD\\\\Projects(khud se)\\\\IDE(task)\\\\my-app\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport hackerEarth from 'hackerearth-node';\nimport { TextareaAutosize, TextField, Button, FormControl, Select, MenuItem } from '@material-ui/core';\n\nfunction App() {\n  // eslint-disable-next-line\n  {\n    //Now set your application \n    var hackerEarth = new hackerEarth('89d6d425a2229325e68ae2bbe0c12d49dcd76a63', //Your Client Secret Key here this is mandatory\n    '' //mode sync=1 or async(optional)=0 or null async is by default and preferred for nodeJS\n    );\n\n    function onCompile() {\n      var config = {};\n      config.time_limit = 1; //your time limit in integer\n\n      config.memory_limit = 323244; //your memory limit in integer\n\n      config.source = `#include <iostream>\n  \n  using namespace std;\n  \n  int main()\n  {\n      cout<<\"Hello World\";\n  \n      return 0;\n  }\n  `; //your source code for which you want to use hackerEarth api\n\n      config.input = \"\"; //input against which you have to test your source code\n\n      config.language = \"C++\"; //optional choose any one of them or none\n\n      hackerEarth.compile(config).then(result => {\n        //Handle Result\n        let ans = JSON.parse(result);\n        console.log(ans.compile_status);\n      }).catch(err => {\n        //Handle Error\n        console.log(err);\n      });\n    }\n\n    const onRun = () => {\n      var config = {};\n      config.time_limit = 1; //your time limit in integer\n\n      config.memory_limit = 323244; //your memory limit in integer\n\n      config.source = `#include <iostream>\n  \n  using namespace std;\n  \n  int main()\n  {\n      cout<<\"Hello World\";\n  \n      return 0;\n  }\n  `; //your source code for which you want to use hackerEarth api\n\n      config.input = \"\"; //input against which you have to test your source code\n\n      config.language = \"C++\"; //optional choose any one of them or none\n\n      hackerEarth.run(config).then(result => {\n        //Handle Result\n        let ans = JSON.parse(result);\n        console.log(ans.run_status.output);\n      }).catch(err => {//Handle Error\n      });\n    };\n  }\n  const [lang, setLang] = useState([{\n    name: \"C++\",\n    v: 1\n  }, {\n    name: \"Python\",\n    v: 2\n  }], []);\n  const [curr, setCurr] = useState([1]);\n  const [source, setSource] = useState({\n    value: ''\n  });\n  const [input, setInput] = useState({\n    value: ''\n  });\n  const [output, setOutput] = useState({\n    value: ''\n  });\n  const codeRef = React.createRef();\n  const stdinRef = useRef();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log(codeRef);\n    await setSource({\n      value: codeRef.current.value\n    });\n    console.log(source);\n    console.log(stdinRef);\n    setInput({\n      value: stdinRef.current.value\n    });\n  };\n\n  const onLangChange = async event => {\n    const valueIndex = event.target.value;\n    setCurr(valueIndex);\n    console.log(valueIndex);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App__left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: \"App__dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    className: \"App__select\",\n    variant: \"outlined\",\n    value: curr,\n    style: {\n      backgroundColor: \"yellow\",\n      color: \"black\"\n    },\n    onChange: onLangChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    style: {},\n    value: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, lang[0].name), /*#__PURE__*/React.createElement(MenuItem, {\n    style: {},\n    value: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, \" \", lang[1].name))), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    ref: codeRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    ref: stdinRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, \"Run\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, \"Compile\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, \"Clear\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App__right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextareaAutosize, {\n    value: output.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["D:/WEBD/Projects(khud se)/IDE(task)/my-app/src/App.js"],"names":["React","useState","useEffect","useRef","hackerEarth","TextareaAutosize","TextField","Button","FormControl","Select","MenuItem","App","onCompile","config","time_limit","memory_limit","source","input","language","compile","then","result","ans","JSON","parse","console","log","compile_status","catch","err","onRun","run","run_status","output","lang","setLang","name","v","curr","setCurr","setSource","value","setInput","setOutput","codeRef","createRef","stdinRef","handleSubmit","e","preventDefault","current","onLangChange","event","valueIndex","target","backgroundColor","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAoCC,MAApC,QAAkD,OAAlD;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,SACEC,gBADF,EAEEC,SAFF,EAGEC,MAHF,EAIEC,WAJF,EAKEC,MALF,EAMEC,QANF,QAOO,mBAPP;;AAWA,SAASC,GAAT,GAAe;AACb;AACA;AACA;AACA,QAAIP,WAAW,GAAC,IAAIA,WAAJ,CACgB,0CADhB,EAC6D;AAC7C,MAFhB,CAEoB;AAFpB,KAAhB;;AAKA,aAASQ,SAAT,GAAoB;AAClB,UAAIC,MAAM,GAAC,EAAX;AACFA,MAAAA,MAAM,CAACC,UAAP,GAAkB,CAAlB,CAFoB,CAEE;;AACtBD,MAAAA,MAAM,CAACE,YAAP,GAAoB,MAApB,CAHoB,CAGS;;AAC7BF,MAAAA,MAAM,CAACG,MAAP,GAAe;;;;;;;;;;GAAf,CAJoB,CAchB;;AACJH,MAAAA,MAAM,CAACI,KAAP,GAAa,EAAb,CAfoB,CAeF;;AAClBJ,MAAAA,MAAM,CAACK,QAAP,GAAgB,KAAhB,CAhBoB,CAgBG;;AACvBd,MAAAA,WAAW,CAACe,OAAZ,CAAoBN,MAApB,EACyBO,IADzB,CAC8BC,MAAM,IAAI;AACd;AAEA,YAAIC,GAAG,GAACC,IAAI,CAACC,KAAL,CAAWH,MAAX,CAAR;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,cAAhB;AACD,OANzB,EAOyBC,KAPzB,CAO+BC,GAAG,IAAI;AACZ;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACD,OAVzB;AAWG;;AACD,UAAMC,KAAK,GAAC,MAAI;AACd,UAAIjB,MAAM,GAAC,EAAX;AACJA,MAAAA,MAAM,CAACC,UAAP,GAAkB,CAAlB,CAFkB,CAEI;;AACtBD,MAAAA,MAAM,CAACE,YAAP,GAAoB,MAApB,CAHkB,CAGW;;AAC7BF,MAAAA,MAAM,CAACG,MAAP,GAAe;;;;;;;;;;GAAf,CAJkB,CAcd;;AACJH,MAAAA,MAAM,CAACI,KAAP,GAAa,EAAb,CAfkB,CAeA;;AAClBJ,MAAAA,MAAM,CAACK,QAAP,GAAgB,KAAhB,CAhBkB,CAgBK;;AACtBd,MAAAA,WAAW,CAAC2B,GAAZ,CAAgBlB,MAAhB,EACoBO,IADpB,CACyBC,MAAM,IAAI;AACd;AACA,YAAIC,GAAG,GAACC,IAAI,CAACC,KAAL,CAAWH,MAAX,CAAR;AACII,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACU,UAAJ,CAAeC,MAA3B;AACL,OALpB,EAMoBL,KANpB,CAM0BC,GAAG,IAAI,CACZ;AACD,OARpB;AASkB,KA1BjB;AA2BD;AACD,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBlC,QAAQ,CAAC,CAC/B;AACEmC,IAAAA,IAAI,EAAC,KADP;AAEEC,IAAAA,CAAC,EAAC;AAFJ,GAD+B,EAK/B;AACED,IAAAA,IAAI,EAAC,QADP;AAEEC,IAAAA,CAAC,EAAC;AAFJ,GAL+B,CAAD,EAS9B,EAT8B,CAAhC;AAWA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBtC,QAAQ,CAAC,CAAC,CAAD,CAAD,CAAhC;AACA,QAAM,CAACe,MAAD,EAAQwB,SAAR,IAAmBvC,QAAQ,CAAC;AAChCwC,IAAAA,KAAK,EAAC;AAD0B,GAAD,CAAjC;AAGA,QAAM,CAACxB,KAAD,EAAOyB,QAAP,IAAiBzC,QAAQ,CAAC;AAC9BwC,IAAAA,KAAK,EAAC;AADwB,GAAD,CAA/B;AAGA,QAAM,CAACR,MAAD,EAAQU,SAAR,IAAmB1C,QAAQ,CAAC;AAChCwC,IAAAA,KAAK,EAAC;AAD0B,GAAD,CAAjC;AAGA,QAAMG,OAAO,GAAG5C,KAAK,CAAC6C,SAAN,EAAhB;AACA,QAAMC,QAAQ,GAAG3C,MAAM,EAAvB;;AACA,QAAM4C,YAAY,GAAG,MAAMC,CAAN,IAAY;AAC/BA,IAAAA,CAAC,CAACC,cAAF;AACAxB,IAAAA,OAAO,CAACC,GAAR,CAAYkB,OAAZ;AACA,UAAMJ,SAAS,CAAC;AAAEC,MAAAA,KAAK,EAAEG,OAAO,CAACM,OAAR,CAAgBT;AAAzB,KAAD,CAAf;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYoB,QAAZ;AACCJ,IAAAA,QAAQ,CAAC;AAAED,MAAAA,KAAK,EAAEK,QAAQ,CAACI,OAAT,CAAiBT;AAA1B,KAAD,CAAR;AAGF,GATD;;AAWA,QAAMU,YAAY,GAAC,MAAMC,KAAN,IAAc;AAC/B,UAAMC,UAAU,GAAED,KAAK,CAACE,MAAN,CAAab,KAA/B;AACCF,IAAAA,OAAO,CAACc,UAAD,CAAP;AACD5B,IAAAA,OAAO,CAACC,GAAR,CAAY2B,UAAZ;AACD,GAJD;;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACA,IAAA,SAAS,EAAC,aADV;AAEA,IAAA,OAAO,EAAC,UAFR;AAGA,IAAA,KAAK,EAAEf,IAHP;AAIA,IAAA,KAAK,EAAE;AAACiB,MAAAA,eAAe,EAAC,QAAjB;AAA2BC,MAAAA,KAAK,EAAC;AAAjC,KAJP;AAKA,IAAA,QAAQ,EAAEL,YALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE,EAAjB;AAAqB,IAAA,KAAK,EAAE,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCjB,IAAI,CAAC,CAAD,CAAJ,CAAQE,IAAxC,CAPF,eAQE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE,EAAjB;AAAqB,IAAA,KAAK,EAAE,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAiCF,IAAI,CAAC,CAAD,CAAJ,CAAQE,IAAzC,CARF,CADF,CADA,eAcA;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,GAAG,EAAEQ,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdA,eAeA;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,GAAG,EAAEE,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfA,eAiBA,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,SAAlC;AAA4C,IAAA,OAAO,EAAEC,YAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAjBA,eAkBA,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAlBA,eAmBA,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAnBA,CADF,eAuBE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEd,MAAM,CAACQ,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CAvBF,CADF;AA+BD;;AAED,eAAe9B,GAAf","sourcesContent":["import React, { useState, useEffect,useRef } from 'react';\nimport './App.css';\nimport hackerEarth from 'hackerearth-node'\nimport { \n  TextareaAutosize,\n  TextField,\n  Button,\n  FormControl,\n  Select,\n  MenuItem\n} from '@material-ui/core';\n\n\n\nfunction App() {\n  // eslint-disable-next-line\n  {\n  //Now set your application \n  var hackerEarth=new hackerEarth(\n                                  '89d6d425a2229325e68ae2bbe0c12d49dcd76a63',  //Your Client Secret Key here this is mandatory\n                                  ''  //mode sync=1 or async(optional)=0 or null async is by default and preferred for nodeJS\n  );\n  \n  function onCompile(){\n    var config={};\n  config.time_limit=1;  //your time limit in integer\n  config.memory_limit=323244;  //your memory limit in integer\n  config.source=`#include <iostream>\n  \n  using namespace std;\n  \n  int main()\n  {\n      cout<<\"Hello World\";\n  \n      return 0;\n  }\n  `;  //your source code for which you want to use hackerEarth api\n  config.input=\"\";  //input against which you have to test your source code\n  config.language=\"C++\"; //optional choose any one of them or none\n  hackerEarth.compile(config)\n                          .then(result => {\n                            //Handle Result\n  \n                            let ans=JSON.parse(result)\n                            console.log(ans.compile_status)\n                          })\n                          .catch(err => {\n                            //Handle Error\n                            console.log(err)\n                          });\n    }\n    const onRun=()=>{\n      var config={};\n  config.time_limit=1;  //your time limit in integer\n  config.memory_limit=323244;  //your memory limit in integer\n  config.source=`#include <iostream>\n  \n  using namespace std;\n  \n  int main()\n  {\n      cout<<\"Hello World\";\n  \n      return 0;\n  }\n  `;  //your source code for which you want to use hackerEarth api\n  config.input=\"\";  //input against which you have to test your source code\n  config.language=\"C++\"; //optional choose any one of them or none\n   hackerEarth.run(config)\n                      .then(result => {\n                        //Handle Result\n                        let ans=JSON.parse(result)\n                            console.log(ans.run_status.output)\n                      })\n                      .catch(err => {\n                        //Handle Error\n                      });      \n                    }\n  }\n  const [lang, setLang] = useState([\n    {\n      name:\"C++\",\n      v:1\n    },\n    {\n      name:\"Python\",\n      v:2\n    }\n  ],[])\n\n  const [curr, setCurr] = useState([1])\n  const [source,setSource]=useState({\n    value:''\n  })\n  const [input,setInput]=useState({\n    value:''\n  })\n  const [output,setOutput]=useState({\n    value:''\n  })\n  const codeRef = React.createRef()\n  const stdinRef = useRef()\n  const handleSubmit = async(e) => {\n    e.preventDefault();\n    console.log(codeRef)\n    await setSource({ value: codeRef.current.value})\n    console.log(source)\n    console.log(stdinRef)\n     setInput({ value: stdinRef.current.value})\n    \n    \n  };\n\n  const onLangChange=async(event)=>{\n    const valueIndex= event.target.value\n     setCurr(valueIndex)\n    console.log(valueIndex)\n  }\n\n \n\n  return (\n    <div className=\"App\">\n      <div className=\"App__left\">\n      <FormControl className=\"App__dropdown\">\n        <Select\n        className=\"App__select\"\n        variant=\"outlined\"\n        value={curr}\n        style={{backgroundColor:\"yellow\", color:\"black\"}}\n        onChange={onLangChange}\n        >\n          <MenuItem style={{}} value={1}>{lang[0].name}</MenuItem>\n          <MenuItem style={{}} value={2}> {lang[1].name}</MenuItem>\n\n        </Select>\n    </FormControl>\n      <input type=\"text\" ref={codeRef} />\n      <input type=\"text\" ref={stdinRef}  />\n      \n      <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Run</Button>\n      <Button variant=\"contained\" color=\"secondary\">Compile</Button>\n      <Button variant=\"contained\" color=\"primary\">Clear</Button>\n     \n      </div>\n      <div className=\"App__right\">\n     \n      <TextareaAutosize value={output.value}></TextareaAutosize>\n      </div>\n     \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}