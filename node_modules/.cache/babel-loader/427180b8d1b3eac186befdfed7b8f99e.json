{"ast":null,"code":"var hackerEarth = require('hackerearth-node'); //require the Library\n//Now set your application \n\n\nvar hackerEarth = new hackerEarth('89d6d425a2229325e68ae2bbe0c12d49dcd76a63', //Your Client Secret Key here this is mandatory\n'' //mode sync=1 or async(optional)=0 or null async is by default and preferred for nodeJS\n);\n\nfunction onCompile() {\n  var config = {};\n  config.time_limit = 1; //your time limit in integer\n\n  config.memory_limit = 323244; //your memory limit in integer\n\n  config.source = `#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    cout<<\"Hello World\";\n\n    return 0;\n}\n`; //your source code for which you want to use hackerEarth api\n\n  config.input = \"\"; //input against which you have to test your source code\n\n  config.language = \"C++\"; //optional choose any one of them or none\n\n  hackerEarth.compile(config).then(result => {\n    //Handle Result\n    let ans = JSON.parse(result);\n    console.log(ans.compile_status);\n  }).catch(err => {\n    //Handle Error\n    console.log(err);\n  });\n}\n\nexport const onRun = () => {\n  var config = {};\n  config.time_limit = 1; //your time limit in integer\n\n  config.memory_limit = 323244; //your memory limit in integer\n\n  config.source = `#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    cout<<\"Hello World\";\n\n    return 0;\n}\n`; //your source code for which you want to use hackerEarth api\n\n  config.input = \"\"; //input against which you have to test your source code\n\n  config.language = \"C++\"; //optional choose any one of them or none\n\n  hackerEarth.run(config).then(result => {\n    //Handle Result\n    let ans = JSON.parse(result);\n    console.log(ans.run_status.output);\n  }).catch(err => {//Handle Error\n  });\n};","map":{"version":3,"sources":["D:/WEBD/Projects(khud se)/IDE(task)/my-app/src/utils.js"],"names":["hackerEarth","require","onCompile","config","time_limit","memory_limit","source","input","language","compile","then","result","ans","JSON","parse","console","log","compile_status","catch","err","onRun","run","run_status","output"],"mappings":"AAAA,IAAIA,WAAW,GAACC,OAAO,CAAC,kBAAD,CAAvB,C,CAA6C;AAC7C;;;AACA,IAAID,WAAW,GAAC,IAAIA,WAAJ,CACgB,0CADhB,EAC6D;AAC7C,EAFhB,CAEoB;AAFpB,CAAhB;;AAKA,SAASE,SAAT,GAAoB;AAClB,MAAIC,MAAM,GAAC,EAAX;AACFA,EAAAA,MAAM,CAACC,UAAP,GAAkB,CAAlB,CAFoB,CAEE;;AACtBD,EAAAA,MAAM,CAACE,YAAP,GAAoB,MAApB,CAHoB,CAGS;;AAC7BF,EAAAA,MAAM,CAACG,MAAP,GAAe;;;;;;;;;;CAAf,CAJoB,CAchB;;AACJH,EAAAA,MAAM,CAACI,KAAP,GAAa,EAAb,CAfoB,CAeF;;AAClBJ,EAAAA,MAAM,CAACK,QAAP,GAAgB,KAAhB,CAhBoB,CAgBG;;AACvBR,EAAAA,WAAW,CAACS,OAAZ,CAAoBN,MAApB,EACyBO,IADzB,CAC8BC,MAAM,IAAI;AACd;AAEA,QAAIC,GAAG,GAACC,IAAI,CAACC,KAAL,CAAWH,MAAX,CAAR;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,cAAhB;AACD,GANzB,EAOyBC,KAPzB,CAO+BC,GAAG,IAAI;AACZ;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACD,GAVzB;AAWG;;AACF,OAAO,MAAMC,KAAK,GAAC,MAAI;AACpB,MAAIjB,MAAM,GAAC,EAAX;AACJA,EAAAA,MAAM,CAACC,UAAP,GAAkB,CAAlB,CAFwB,CAEF;;AACtBD,EAAAA,MAAM,CAACE,YAAP,GAAoB,MAApB,CAHwB,CAGK;;AAC7BF,EAAAA,MAAM,CAACG,MAAP,GAAe;;;;;;;;;;CAAf,CAJwB,CAcpB;;AACJH,EAAAA,MAAM,CAACI,KAAP,GAAa,EAAb,CAfwB,CAeN;;AAClBJ,EAAAA,MAAM,CAACK,QAAP,GAAgB,KAAhB,CAhBwB,CAgBD;;AACtBR,EAAAA,WAAW,CAACqB,GAAZ,CAAgBlB,MAAhB,EACoBO,IADpB,CACyBC,MAAM,IAAI;AACd;AACA,QAAIC,GAAG,GAACC,IAAI,CAACC,KAAL,CAAWH,MAAX,CAAR;AACII,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACU,UAAJ,CAAeC,MAA3B;AACL,GALpB,EAMoBL,KANpB,CAM0BC,GAAG,IAAI,CACZ;AACD,GARpB;AASkB,CA1BX","sourcesContent":["var hackerEarth=require('hackerearth-node'); //require the Library\r\n//Now set your application \r\nvar hackerEarth=new hackerEarth(\r\n                                '89d6d425a2229325e68ae2bbe0c12d49dcd76a63',  //Your Client Secret Key here this is mandatory\r\n                                ''  //mode sync=1 or async(optional)=0 or null async is by default and preferred for nodeJS\r\n);\r\n\r\nfunction onCompile(){\r\n  var config={};\r\nconfig.time_limit=1;  //your time limit in integer\r\nconfig.memory_limit=323244;  //your memory limit in integer\r\nconfig.source=`#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    cout<<\"Hello World\";\r\n\r\n    return 0;\r\n}\r\n`;  //your source code for which you want to use hackerEarth api\r\nconfig.input=\"\";  //input against which you have to test your source code\r\nconfig.language=\"C++\"; //optional choose any one of them or none\r\nhackerEarth.compile(config)\r\n                        .then(result => {\r\n                          //Handle Result\r\n\r\n                          let ans=JSON.parse(result)\r\n                          console.log(ans.compile_status)\r\n                        })\r\n                        .catch(err => {\r\n                          //Handle Error\r\n                          console.log(err)\r\n                        });\r\n  }\r\n export const onRun=()=>{\r\n    var config={};\r\nconfig.time_limit=1;  //your time limit in integer\r\nconfig.memory_limit=323244;  //your memory limit in integer\r\nconfig.source=`#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    cout<<\"Hello World\";\r\n\r\n    return 0;\r\n}\r\n`;  //your source code for which you want to use hackerEarth api\r\nconfig.input=\"\";  //input against which you have to test your source code\r\nconfig.language=\"C++\"; //optional choose any one of them or none\r\n hackerEarth.run(config)\r\n                    .then(result => {\r\n                      //Handle Result\r\n                      let ans=JSON.parse(result)\r\n                          console.log(ans.run_status.output)\r\n                    })\r\n                    .catch(err => {\r\n                      //Handle Error\r\n                    });      \r\n                  }\r\n\r\n"]},"metadata":{},"sourceType":"module"}