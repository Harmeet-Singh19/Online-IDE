{"ast":null,"code":"'use strict';\n\nconst rp = require('request-promise');\n\nconst debug = require('debug')('HE');\n\nclass helpers {\n  constructor() {}\n\n  getQueryData({\n    language,\n    time_limit,\n    memory_limit,\n    source,\n    input\n  }, clientSecret, mode) {\n    const obj = {\n      client_secret: clientSecret,\n      async: mode,\n      source: source,\n      lang: this.getLanuage(language),\n      input: input,\n      time_limit: time_limit || 1,\n      memory_limit: memory_limit || 262144\n    };\n    return obj;\n  }\n\n  getLanuage(language) {\n    let lang;\n\n    if (language === 'C++') {\n      lang = 'CPP';\n    } else if (language === 'C') {\n      lang = 'C';\n    } else if (language === 'Py') {\n      lang = 'PYTHON';\n    } else if (language === 'C#') {\n      lang = 'CSHARP';\n    }\n\n    return lang;\n  }\n\n  getRequestPostJSON(data, url) {\n    return {\n      method: 'POST',\n      uri: 'https://cors-anywhere.herokuapp.com/' + url,\n      form: data,\n      gzip: true,\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Access-Control-Allow-Origin': 'http://localhost:3000',\n        'Access-Control-Allow-Methods': 'GET, PUT, POST, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Accept, Content-Type, Origin'\n      }\n    };\n  }\n\n  doOperation(rpData, callback) {\n    return new Promise((resolve, reject) => {\n      rp(rpData).then(body => {\n        return body;\n      }).then(res => {\n        if (callback) {\n          callback(null, res);\n        }\n\n        resolve(res);\n      }).catch(err => {\n        if (callback) {\n          callback(err, null);\n        }\n\n        reject(err);\n      });\n    });\n  }\n\n}\n\nclass HackerEarth extends helpers {\n  constructor(clientSecret, mode) {\n    super();\n    this._runURL = 'https://api.hackerearth.com/v3/code/run/';\n    this._compileURL = 'https://api.hackerearth.com/v3/code/compile/';\n    this._clientSecret = clientSecret;\n    this._mode = mode || 0;\n    debug('Bootstraping HackerEarth module with clientSecret as %s and mode as %s', clientSecret, mode);\n  }\n\n  get runURL() {\n    return this._runURL;\n  }\n\n  get compileURL() {\n    return this._compileURL;\n  }\n\n  get clientSecret() {\n    return this._clientSecret;\n  }\n\n  get mode() {\n    return this._mode;\n  }\n\n  compile(config, callback) {\n    let data = super.getQueryData(config, this.clientSecret, this.mode);\n    debug('In HackerEarth:Compile Data sent to API is %s', JSON.stringify(data));\n    let rpData = super.getRequestPostJSON(data, this.compileURL);\n    return super.doOperation(rpData, callback);\n  }\n\n  run(config, callback) {\n    let data = super.getQueryData(config, this.clientSecret, this.mode);\n    debug('In HackerEarth:Run Data sent to API is %s', JSON.stringify(data));\n    let rpData = super.getRequestPostJSON(data, this.runURL);\n    return super.doOperation(rpData, callback);\n  }\n\n}\n\nmodule.exports = HackerEarth;","map":{"version":3,"sources":["D:/WEBD/Projects(khud se)/IDE(task)/my-app/client/src/ide.js"],"names":["rp","require","debug","helpers","constructor","getQueryData","language","time_limit","memory_limit","source","input","clientSecret","mode","obj","client_secret","async","lang","getLanuage","getRequestPostJSON","data","url","method","uri","form","gzip","headers","doOperation","rpData","callback","Promise","resolve","reject","then","body","res","catch","err","HackerEarth","_runURL","_compileURL","_clientSecret","_mode","runURL","compileURL","compile","config","JSON","stringify","run","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\nconst rp = require('request-promise');\r\nconst debug = require('debug')('HE');\r\n\r\nclass helpers {\r\n    constructor() {\r\n\r\n    }\r\n    getQueryData({language,time_limit,memory_limit,source,input},clientSecret,mode) {\r\n        const obj ={\r\n            client_secret:clientSecret,\r\n            async:mode,\r\n            source:source,\r\n            lang:this.getLanuage(language),\r\n            input:input,\r\n            time_limit:time_limit||1,\r\n            memory_limit:memory_limit||262144\r\n        };\r\n        return obj;\r\n    }\r\n    getLanuage(language) {\r\n        let lang;\r\n        if (language === 'C++') {\r\n            lang = 'CPP';\r\n        } else if (language === 'C') {\r\n            lang = 'C';\r\n        } else if (language === 'Py') {\r\n            lang = 'PYTHON';\r\n        } else if (language === 'C#') {\r\n            lang = 'CSHARP';\r\n        } \r\n        return lang;\r\n    }\r\n\r\n    getRequestPostJSON(data,url) {\r\n        return {\r\n            method: 'POST',\r\n            uri: 'https://cors-anywhere.herokuapp.com/'+url,\r\n            form: data,\r\n            gzip: true,\r\n            headers:{\r\n                'Content-Type': 'multipart/form-data',\r\n                'X-Requested-With':'XMLHttpRequest',\r\n                'Access-Control-Allow-Origin':'http://localhost:3000',\r\n                'Access-Control-Allow-Methods':'GET, PUT, POST, DELETE, OPTIONS',\r\n                'Access-Control-Allow-Headers':'Accept, Content-Type, Origin'\r\n              },\r\n        };\r\n    }\r\n\r\n    doOperation(rpData,callback) {\r\n        return new Promise((resolve, reject) => {\r\n             rp(rpData)\r\n                    .then((body) => {\r\n                        return body;\r\n                    })\r\n                    .then((res) => {\r\n                        if(callback) {\r\n                            callback(null,res);\r\n                        }\r\n                        resolve(res);\r\n                    })\r\n                    .catch((err) => {\r\n                        if(callback) {\r\n                            callback(err,null);\r\n                        }\r\n                        reject(err);\r\n                    });\r\n        });\r\n    }\r\n\r\n}\r\n\r\nclass HackerEarth extends helpers {\r\n    constructor(clientSecret, mode) {\r\n        super();  \r\n        this._runURL = 'https://api.hackerearth.com/v3/code/run/';\r\n        this._compileURL = 'https://api.hackerearth.com/v3/code/compile/';\r\n        this._clientSecret = clientSecret;\r\n        this._mode = mode || 0;\r\n        debug('Bootstraping HackerEarth module with clientSecret as %s and mode as %s', clientSecret,mode);\r\n    }\r\n\r\n    get runURL() {\r\n        return this._runURL;\r\n    }\r\n\r\n    get compileURL() {\r\n        return this._compileURL;    \r\n    }\r\n\r\n    get clientSecret() {\r\n        return this._clientSecret;\r\n    }\r\n\r\n    get mode() {\r\n        return this._mode;\r\n    }\r\n    compile(config, callback) {\r\n        let data = super.getQueryData(config,this.clientSecret,this.mode);\r\n        debug('In HackerEarth:Compile Data sent to API is %s',JSON.stringify(data));\r\n        let rpData = super.getRequestPostJSON(data,this.compileURL);\r\n        return super.doOperation(rpData,callback);    \r\n    }\r\n\r\n    run(config, callback) {\r\n        let data = super.getQueryData(config,this.clientSecret,this.mode);\r\n        debug('In HackerEarth:Run Data sent to API is %s',JSON.stringify(data));\r\n        let rpData=super.getRequestPostJSON(data,this.runURL);\r\n        return super.doOperation(rpData,callback);\r\n    }\r\n}\r\n\r\nmodule.exports = HackerEarth;"]},"metadata":{},"sourceType":"module"}